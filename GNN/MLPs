{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"MLPs","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyM/tWxsvozW1vEHpkjTCYlE"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"o3SLVAhpWWwg"},"outputs":[],"source":["\n","\n","import os\n","import sys\n","import numpy as np\n","import torch\n","import random\n","from torch.autograd import Variable\n","from torch.nn.parameter import Parameter\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torch.optim as optim\n","from tqdm import tqdm\n","import pdb\n","\n","sys.path.append('%s/lib' % os.path.dirname(os.path.realpath(__file__)))\n","from pytorch_util import weights_init\n","\n","class MLPRegression(nn.Module):\n","    def __init__(self, input_size, hidden_size, with_dropout=False):\n","        super(MLPRegression, self).__init__()\n","\n","        self.h1_weights = nn.Linear(input_size, hidden_size)\n","        self.h2_weights = nn.Linear(hidden_size, 1)\n","        self.with_dropout = with_dropout\n","\n","        weights_init(self)\n","\n","    def forward(self, x, y = None):\n","        h1 = self.h1_weights(x)\n","        h1 = F.relu(h1)\n","\n","        if self.with_dropout:\n","            h1 = F.dropout(h1, training=self.training)\n","        pred = self.h2_weights(h1)[:, 0]\n","\n","        if y is not None:\n","            y = Variable(y)\n","            mse = F.mse_loss(pred, y)\n","            mae = F.l1_loss(pred, y)\n","            mae = mae.cpu().detach()\n","            return pred, mae, mse\n","        else:\n","            return pred\n","\n","class MLPClassifier(nn.Module):\n","    def __init__(self, input_size, hidden_size, num_class, with_dropout=False):\n","        super(MLPClassifier, self).__init__()\n","\n","        self.h1_weights = nn.Linear(input_size, hidden_size)\n","        self.h2_weights = nn.Linear(hidden_size, num_class)\n","        self.with_dropout = with_dropout\n","\n","        weights_init(self)\n","\n","    def forward(self, x, y = None):\n","        h1 = self.h1_weights(x)\n","        h1 = F.relu(h1)\n","        if self.with_dropout:\n","            h1 = F.dropout(h1, training=self.training)\n","\n","        logits = self.h2_weights(h1)\n","        logits = F.log_softmax(logits, dim=1)\n","\n","        if y is not None:\n","            y = Variable(y)\n","            loss = F.nll_loss(logits, y)\n","\n","            pred = logits.data.max(1, keepdim=True)[1]\n","            acc = pred.eq(y.data.view_as(pred)).cpu().sum().item() / float(y.size()[0])\n","            return logits, loss, acc\n","        else:\n","            return logits"]}]}